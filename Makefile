# simple-runtime-analyzer Makefile
# Usage:
#   make run SRC=my_code.cpp        # compile and run your own file and plot results
#   make example                     # compile and run the official example and plot its results
#   make example_clear               # clean binaries and data files from the example
#   make clear                       # clean binaries and data files from your project

CXX = clang++
CXXFLAGS = -std=c++23 -stdlib=libc++ -O2 -Iinclude # Make sure 'include' is the right path to your Headers
WARN = -Wall -Wextra -pedantic

BIN_DIR = bin
DATA_DIR = data
# TARGET will be the name of the executable that will be created for the user file
TARGET = user_program

# Output files expected by the user program
CSV_OUTPUT = $(DATA_DIR)/times.csv
JSON_OUTPUT = $(DATA_DIR)/times.json
TXT_OUTPUT = $(DATA_DIR)/times.txt

.PHONY: all run example example_clear clear

all: run

# Objective 'run': Compile and execute the user specified file
# Then try to graph the results.
run:
	@echo "üîß Compiling $(SRC)..."
	@mkdir -p $(BIN_DIR)
# Compile the user specified source file.
# The executable is saved at $(BIN_DIR)/$(TARGET)
	$(CXX) $(CXXFLAGS) $(WARN) -o $(BIN_DIR)/$(TARGET) $(SRC)
	
	@echo "üöÄ Running $(TARGET)..."
	@mkdir -p $(DATA_DIR)
# Execute the compiled program
	@./$(BIN_DIR)/$(TARGET)

# Check if the output files exist and plot them
	@if [ -f $(CSV_OUTPUT) ]; then \
		echo "üêç Plotting results with plot.py using $(CSV_OUTPUT)..."; \
		python3 scripts/plot.py $(CSV_OUTPUT); \
	elif [ -f $(JSON_OUTPUT) ]; then \
		echo "üêç Plotting results with plot.py using $(JSON_OUTPUT)..."; \
		python3 scripts/plot.py $(JSON_OUTPUT); \
	elif [ -f $(TXT_OUTPUT) ]; then \
		echo "üêç Plotting results with plot.py using $(TXT_OUTPUT)..."; \
		python3 scripts/plot.py $(TXT_OUTPUT); \
	else \
		echo "‚ùå No output file (.csv, .json, .txt) found at $(DATA_DIR). Skipping plot."; \
	fi

# Objective 'example': delegates the execution to the makefile in the 'example' directory.
# This will compile and execute the official example.
example:
	@$(MAKE) -C example run

# Objective 'example_clear': Delegate the cleaning of the makefile in the 'example' directory.
# This will clean the files generated by the official example.
example_clear:
	@$(MAKE) -C example clear

# Objective 'Clear': Clean the binary and data files generated by the user's project.
clear:
	@echo "üßπ Cleaning user project binaries and data files..."
# Eliminate the main executable
	@rm -f $(BIN_DIR)/$(TARGET)
# Eliminate the data files generated
	@rm -f $(DATA_DIR)/*.csv
	@rm -f $(DATA_DIR)/*.json
	@rm -f $(DATA_DIR)/*.txt
# Eliminates any image file (.png) that may have been generated by 'plot.py'
	@rm -f $(DATA_DIR)/*.png
# Optional: Eliminate directories if they are empty.Be careful with this, it could be unwanted.
# @rmdir --ignore-fail-on-non-empty $(BIN_DIR) $(DATA_DIR)