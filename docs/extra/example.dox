/**
 * @file example.cpp
 * @brief Complete example of use of the measurement toolkit and sampling.
 *
 * This file shows how to:
 * - Generate random integer samples with scalable sizes
 * - Measure the execution time of a sorting function
 * - Convert time units
 * - Serialize samples and results to `.csv` files
 *
 * ---
 *
 * @section General flow
 *
 * 1. Constants are defined for the range of random integers.
 * 2. A set of sample sizes with a logarithmic bias is generated.
 * 3. Samples are created using `fillWithRandomInts`.
 * 4. The sorting time is measured with `sortSample`.
 * 5. The result is converted from microseconds to milliseconds.
 * 6. Each result is printed with its sample size.
 * 7. The samples and times are saved to `.csv` files.
 *
 * ---
 *
 * @section Functions used
 *
 * - `generateSizes(sample_count, max_size, config)`: generates biased sizes.
 * - `generateSamples<T>(generator, sizes)`: creates samples with a generator.
 * - `measureMultipleTimes<Unit>(func, args...)`: measures execution times.
 * - `convertTo<Unit>()`: converts time units.
 * - `serializeSamplesToFile(samples, serializer, filename)`: saves samples.
 * - `measureMultipleTimesToFile<Unit>(func, args..., filename)`: saves times.
 *
 * ---
 *
 * @section Functions defined in the example
 *
 * - `fillWithRandomInts(std::vector<int>& vec, size_t size)`
 * - Fills a vector with random integers between `MIN_SAMPLE_VALUE` and `MAX_SAMPLE_VALUE`.
 * - Uses `std::mt19937` and `std::uniform_int_distribution`.
 *
 * - `sortSample(std::vector<int> sample, bool use_stable_sort)`
 * - Sorts the vector using `std::sort` or `std::stable_sort` based on the flag.
 * - Is passed by copy to avoid modifying the original sample.
 *
 * ---
 *
 * @section Generated files
 *
 * - `data/samples.csv`: contains the generated samples, one per line.
 * - `data/times.csv`: contains the execution times per sample.
 * - Both files can be visualized with `plot.py`.
 *
 * ---
 *
 * @note This example is designed to be reproducible and easy to extend.
 * Modify the generator or the measured function to test other algorithms.
 */