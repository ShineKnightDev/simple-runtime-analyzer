/**
 * @file measure_time.hpp
 * @brief Functions to measure execution time and save results.
 *
 * This module defines generic functions to measure the execution time of
 * arbitrary functions, run multiple tests, and save the results in different
 * formats. It uses `std::chrono` and templates for flexibility.
 *
 * ---
 *
 * @struct MeasurementResult
 * @brief Structure that encapsulates measurement results.
 *
 * Contains:
 * - `times`: vector of individual durations (`std::chrono::duration`)
 * - `unit`: name of the time unit (e.g., `"ms"`)
 * - `symbol`: symbol of the unit (e.g., `"Î¼s"`)
 *
 * It is used as the standard result for all measurement functions.
 */

/// @brief Measures the execution time of a function with arguments.
/**
 * @tparam Unit Time unit (`std::chrono::milliseconds`, etc.)
 * @tparam Func Type of function to execute
 * @tparam Args Types of the function's arguments
 *
 * @param func Function to measure
 * @param args Arguments to pass to the function
 * @return Duration in the specified unit
 *
 * @details
 * Internally uses `std::chrono::steady_clock::now()` before and after
 * executing the function, and calculates the difference. The result is
 * converted to the desired unit.
 */
template <typename Unit, typename Func, typename... Args>
Unit measureTime(Func&& func, Args&&... args);

/// @brief Runs multiple measurements of a function and returns statistics.
/**
 * @tparam Unit Time unit
 * @tparam Func Function type
 * @tparam Args Argument types
 *
 * @param repetitions Number of times the function is executed
 * @param func Function to measure
 * @param args Function arguments
 * @return MeasurementResult with all durations
 *
 * @details
 * It runs `measureTime` in a loop `repetitions` times.
 * The results are stored in a vector. No average or standard deviation is
 * calculated, but this can be done externally.
 */
template <typename Unit, typename Func, typename... Args>
MeasurementResult measureMultipleTimes(size_t repetitions, Func&& func, Args&&... args);

/// @brief Runs multiple measurements and saves the results to a file.
/**
 * @tparam Unit Time unit
 * @tparam Func Function type
 * @tparam Args Argument types
 *
 * @param repetitions Number of executions
 * @param filename Output file path
 * @param func Function to measure
 * @param args Function arguments
 *
 * @details
 * - The output format is determined by the file extension:
 * - `.txt`: list with times and unit
 * - `.csv`: table with index and time
 * - `.json`: object with an array of times and metadata
 * - If the extension is not recognized, an exception is thrown.
 * - Uses `std::ofstream` and `std::filesystem` to handle files.
 */
template <typename Unit, typename Func, typename... Args>
void measureMultipleTimesToFile(size_t repetitions, const std::string& filename, Func&& func, Args&&... args);