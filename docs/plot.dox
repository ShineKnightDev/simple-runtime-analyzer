/**
 * @file plot.py
 * @brief Script to visualize execution times as a function of sample size.
 *
 * This script reads `.csv` or `.json` files generated by the measurement toolkit
 * and creates a PNG graph using `matplotlib`, showing the relationship between
 * sample size and execution time.
 *
 * ---
 *
 * @section Main Functions
 *
 * - `read_csv(file_path)`: Reads data from a CSV file with `sample_size`, `time_value`, and `time_unit` fields.
 * - Handles conversion errors and missing fields.
 * - Returns three lists: sizes, times, and the unit.
 *
 * - `read_json(file_path)`: Reads data from a JSON file with the same structure.
 * - Uses `json.load()` and handles decoding errors.
 * - Returns the same three elements.
 *
 * - `read_data(file_path)`: Detects the file extension and delegates to `read_csv` or `read_json`.
 * - Throws an exception if the extension is not supported.
 *
 * - `plot_metrics(sizes, times, unit, source_path)`: Generates and saves a PNG graph.
 * - Uses `matplotlib.pyplot` to plot points with lines.
 * - Labels the axes, title, and legend.
 * - Saves the image with the same base name as the input file.
 *
 * ---
 *
 * @section Command Line Usage
 *
 * ```bash
 * python plot.py results.csv
 * python plot.py results.json
 * ```
 *
 * The script requires at least one argument: the data file path.
 * If the file is valid, it generates a `results.png` image in the same directory.
 *
 * ---
 *
 * @section Technical Considerations
 *
 * - The script is designed to be robust against format errors.
 * - It's recommended to use files generated by `measureMultipleTimesToFile`.
 * - The visualization is linear; if a logarithmic scale is desired, `plt.xscale('log')` can be modified.
 *
 * @note The script is not dependent on the C++ toolkit, but it is designed to integrate with it.
 */