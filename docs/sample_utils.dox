/**
 * @file sample_utils.hpp
 * @brief Utilities to generate samples, configure sizes, and serialize data.
 *
 * This module provides tools to:
 * - Configure sample sizes with bias and rounding
 * - Generate logarithmically distributed size vectors
 * - Create samples with custom generators
 * - Serialize containers to text
 * - Save samples to `.txt`, `.csv`, and `.json` files
 *
 * ---
 *
 * @struct SampleSizeConfig
 * @brief Configuration for generating sample sizes.
 *
 * Fields:
 * - `min`: minimum size (e.g., 10)
 * - `max`: maximum size (e.g., 10000)
 * - `steps`: number of sizes to generate
 * - `round_to`: optional rounding (e.g., 10, 100)
 * - `bias`: logarithmic bias (e.g., 1.0 = uniform, >1.0 = smaller sizes are more frequent)
 *
 * @details
 * Used to control the distribution of sizes generated by `generateSizes`.
 */

/// @brief Generates a list of logarithmically distributed sample sizes.
/**
 * @param config `SampleSizeConfig` structure with generation parameters
 * @return Vector of sizes (`std::vector<size_t>`)
 *
 * @details
 * - Calculates `steps` values between `min` and `max` using a logarithmic scale.
 * - Applies the bias by multiplying the logarithm by `bias`.
 * - Rounds each value to `round_to` if defined.
 * - The result is a sorted vector of increasing sizes.
 *
 * @note Ideal for performance testing with progressive scalability.
 */
std::vector<size_t> generateSizes(const SampleSizeConfig& config);

/// @brief Generates input samples using a custom generator.
/**
 * @tparam T Type of the sample elements
 * @param sizes Vector of sizes (e.g., generated by `generateSizes`)
 * @param generator A function that takes `(std::vector<T>&, size_t)` and fills the container
 * @return Vector of samples (`std::vector<std::vector<T>>`)
 *
 * @details
 * - For each size in `sizes`, it creates an empty `std::vector<T>`.
 * - Calls the `generator` to fill the vector with data.
 * - Adds each sample to the result.
 *
 * @note The `generator` can be a lambda, function, or functor.
 * Example of a valid signature:
 * ```cpp
 * void generateIntegers(std::vector<int>& destination, size_t n);
 * ```
 */
template <typename T>
std::vector<std::vector<T>> generateSamples(const std::vector<size_t>& sizes,
                                            const std::function<void(std::vector<T>&, size_t)>& generator);

/// @brief Converts an iterable container into a string.
/**
 * @tparam Iterable Type of the container (e.g., `std::vector<int>`)
 * @param iterable Container to serialize
 * @param delimiter Separator between elements (default: `" "`)
 * @return String with the separated elements
 *
 * @details
 * - Iterates over the container using `begin()` and `end()`.
 * - Converts each element to a string using `std::ostringstream`.
 * - Joins the elements with the delimiter.
 *
 * @note Useful for generating readable lines in `.txt` or `.csv`.
 */
template <typename Iterable>
std::string serializeIterable(const Iterable& iterable, const std::string& delimiter = " ");

/// @brief Saves samples to a file in `.txt`, `.csv`, or `.json` format.
/**
 * @tparam T Type of the sample elements
 * @param samples Vector of samples (`std::vector<std::vector<T>>`)
 * @param filename Output file path
 *
 * @details
 * - Detects the format by the file extension:
 * - `.txt`: each sample on a new line, separated by spaces
 * - `.csv`: each sample as a row, elements separated by commas
 * - `.json`: an array of arrays, using `nlohmann::json` if available
 * - Uses `std::ofstream` to write the file.
 * - If the extension is not valid, it throws an exception.
 *
 * @note The `.json` format requires that `T` is serializable by the library.
 */
template <typename T>
void serializeSamplesToFile(const std::vector<std::vector<T>>& samples, const std::string& filename);

